/*
 * Created on 28 okt 2015 ( Time 11:01:16 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.backpacker4.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.backpacker4.bean.AlbumPhoto;
import org.backpacker4.bean.jpa.AlbumPhotoEntity;
import org.backpacker4.bean.jpa.AlbumPhotoEntityKey;
import org.backpacker4.business.service.mapping.AlbumPhotoServiceMapper;
import org.backpacker4.persistence.services.jpa.AlbumPhotoPersistenceJPA;
import org.backpacker4.test.AlbumPhotoFactoryForTest;
import org.backpacker4.test.AlbumPhotoEntityFactoryForTest;
import org.backpacker4.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of AlbumPhotoService
 */
@RunWith(MockitoJUnitRunner.class)
public class AlbumPhotoServiceImplTest {

	@InjectMocks
	private AlbumPhotoServiceImpl albumPhotoService;
	@Mock
	private AlbumPhotoPersistenceJPA albumPhotoPersistenceJPA;
	@Mock
	private AlbumPhotoServiceMapper albumPhotoServiceMapper;
	
	private AlbumPhotoFactoryForTest albumPhotoFactoryForTest = new AlbumPhotoFactoryForTest();

	private AlbumPhotoEntityFactoryForTest albumPhotoEntityFactoryForTest = new AlbumPhotoEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long idAlbum = mockValues.nextLong();
		Long idPhoto = mockValues.nextLong();
		
		AlbumPhotoEntityKey albumPhotoEntityKey = new AlbumPhotoEntityKey(idAlbum, idPhoto);
		albumPhotoEntityKey.setIdAlbum(idAlbum);
		albumPhotoEntityKey.setIdPhoto(idPhoto);
		
		AlbumPhotoEntity albumPhotoEntity = albumPhotoPersistenceJPA.load(albumPhotoEntityKey);
		
		AlbumPhoto albumPhoto = albumPhotoFactoryForTest.newAlbumPhoto();
		when(albumPhotoServiceMapper.mapAlbumPhotoEntityToAlbumPhoto(albumPhotoEntity)).thenReturn(albumPhoto);

		// When
		AlbumPhoto albumPhotoFound = albumPhotoService.findById(idAlbum, idPhoto);

		// Then
		assertEquals(albumPhoto.getIdAlbum(),albumPhotoFound.getIdAlbum());
		assertEquals(albumPhoto.getIdPhoto(),albumPhotoFound.getIdPhoto());
	}

	@Test
	public void findAll() {
		// Given
		List<AlbumPhotoEntity> albumPhotoEntitys = new ArrayList<AlbumPhotoEntity>();
		AlbumPhotoEntity albumPhotoEntity1 = albumPhotoEntityFactoryForTest.newAlbumPhotoEntity();
		albumPhotoEntitys.add(albumPhotoEntity1);
		AlbumPhotoEntity albumPhotoEntity2 = albumPhotoEntityFactoryForTest.newAlbumPhotoEntity();
		albumPhotoEntitys.add(albumPhotoEntity2);
		when(albumPhotoPersistenceJPA.loadAll()).thenReturn(albumPhotoEntitys);
		
		AlbumPhoto albumPhoto1 = albumPhotoFactoryForTest.newAlbumPhoto();
		when(albumPhotoServiceMapper.mapAlbumPhotoEntityToAlbumPhoto(albumPhotoEntity1)).thenReturn(albumPhoto1);
		AlbumPhoto albumPhoto2 = albumPhotoFactoryForTest.newAlbumPhoto();
		when(albumPhotoServiceMapper.mapAlbumPhotoEntityToAlbumPhoto(albumPhotoEntity2)).thenReturn(albumPhoto2);

		// When
		List<AlbumPhoto> albumPhotosFounds = albumPhotoService.findAll();

		// Then
		assertTrue(albumPhoto1 == albumPhotosFounds.get(0));
		assertTrue(albumPhoto2 == albumPhotosFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		AlbumPhoto albumPhoto = albumPhotoFactoryForTest.newAlbumPhoto();

		AlbumPhotoEntity albumPhotoEntity = albumPhotoEntityFactoryForTest.newAlbumPhotoEntity();
		when(albumPhotoPersistenceJPA.load(albumPhoto.getIdAlbum(), albumPhoto.getIdPhoto())).thenReturn(null);
		
		albumPhotoEntity = new AlbumPhotoEntity();
		albumPhotoServiceMapper.mapAlbumPhotoToAlbumPhotoEntity(albumPhoto, albumPhotoEntity);
		AlbumPhotoEntity albumPhotoEntitySaved = albumPhotoPersistenceJPA.save(albumPhotoEntity);
		
		AlbumPhoto albumPhotoSaved = albumPhotoFactoryForTest.newAlbumPhoto();
		when(albumPhotoServiceMapper.mapAlbumPhotoEntityToAlbumPhoto(albumPhotoEntitySaved)).thenReturn(albumPhotoSaved);

		// When
		AlbumPhoto albumPhotoResult = albumPhotoService.create(albumPhoto);

		// Then
		assertTrue(albumPhotoResult == albumPhotoSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		AlbumPhoto albumPhoto = albumPhotoFactoryForTest.newAlbumPhoto();

		AlbumPhotoEntity albumPhotoEntity = albumPhotoEntityFactoryForTest.newAlbumPhotoEntity();
		when(albumPhotoPersistenceJPA.load(albumPhoto.getIdAlbum(), albumPhoto.getIdPhoto())).thenReturn(albumPhotoEntity);

		// When
		Exception exception = null;
		try {
			albumPhotoService.create(albumPhoto);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		AlbumPhoto albumPhoto = albumPhotoFactoryForTest.newAlbumPhoto();

		AlbumPhotoEntity albumPhotoEntity = albumPhotoEntityFactoryForTest.newAlbumPhotoEntity();
		when(albumPhotoPersistenceJPA.load(albumPhoto.getIdAlbum(), albumPhoto.getIdPhoto())).thenReturn(albumPhotoEntity);
		
		AlbumPhotoEntity albumPhotoEntitySaved = albumPhotoEntityFactoryForTest.newAlbumPhotoEntity();
		when(albumPhotoPersistenceJPA.save(albumPhotoEntity)).thenReturn(albumPhotoEntitySaved);
		
		AlbumPhoto albumPhotoSaved = albumPhotoFactoryForTest.newAlbumPhoto();
		when(albumPhotoServiceMapper.mapAlbumPhotoEntityToAlbumPhoto(albumPhotoEntitySaved)).thenReturn(albumPhotoSaved);

		// When
		AlbumPhoto albumPhotoResult = albumPhotoService.update(albumPhoto);

		// Then
		verify(albumPhotoServiceMapper).mapAlbumPhotoToAlbumPhotoEntity(albumPhoto, albumPhotoEntity);
		assertTrue(albumPhotoResult == albumPhotoSaved);
	}

	@Test
	public void delete() {
		// Given
		Long idAlbum = mockValues.nextLong();
		Long idPhoto = mockValues.nextLong();

		// When
		albumPhotoService.delete(idAlbum, idPhoto);

		// Then
		verify(albumPhotoPersistenceJPA).delete(idAlbum, idPhoto);
		
	}

}
