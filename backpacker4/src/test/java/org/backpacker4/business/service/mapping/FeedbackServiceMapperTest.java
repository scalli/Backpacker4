/*
 * Created on 28 okt 2015 ( Time 11:01:16 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.backpacker4.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.backpacker4.bean.Feedback;
import org.backpacker4.bean.jpa.FeedbackEntity;
import org.backpacker4.bean.jpa.AppuserEntity;
import org.backpacker4.bean.jpa.TypeinfoEntity;
import org.backpacker4.bean.jpa.PositionEntity;
import org.backpacker4.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class FeedbackServiceMapperTest {

	private FeedbackServiceMapper feedbackServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		feedbackServiceMapper = new FeedbackServiceMapper();
		feedbackServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'FeedbackEntity' to 'Feedback'
	 * @param feedbackEntity
	 */
	@Test
	public void testMapFeedbackEntityToFeedback() {
		// Given
		FeedbackEntity feedbackEntity = new FeedbackEntity();
		feedbackEntity.setComment(mockValues.nextString(2147483647));
		feedbackEntity.setDatefeedback(mockValues.nextDate());
		feedbackEntity.setAppuser(new AppuserEntity());
		feedbackEntity.getAppuser().setId(mockValues.nextLong());
		feedbackEntity.setTypeinfo(new TypeinfoEntity());
		feedbackEntity.getTypeinfo().setId(mockValues.nextLong());
		feedbackEntity.setPosition(new PositionEntity());
		feedbackEntity.getPosition().setId(mockValues.nextLong());
		
		// When
		Feedback feedback = feedbackServiceMapper.mapFeedbackEntityToFeedback(feedbackEntity);
		
		// Then
		assertEquals(feedbackEntity.getComment(), feedback.getComment());
		assertEquals(feedbackEntity.getDatefeedback(), feedback.getDatefeedback());
		assertEquals(feedbackEntity.getAppuser().getId(), feedback.getIdUser());
		assertEquals(feedbackEntity.getTypeinfo().getId(), feedback.getIdTypeinfo());
		assertEquals(feedbackEntity.getPosition().getId(), feedback.getIdPosition());
	}
	
	/**
	 * Test : Mapping from 'Feedback' to 'FeedbackEntity'
	 */
	@Test
	public void testMapFeedbackToFeedbackEntity() {
		// Given
		Feedback feedback = new Feedback();
		feedback.setComment(mockValues.nextString(2147483647));
		feedback.setDatefeedback(mockValues.nextDate());
		feedback.setIdUser(mockValues.nextLong());
		feedback.setIdTypeinfo(mockValues.nextLong());
		feedback.setIdPosition(mockValues.nextLong());

		FeedbackEntity feedbackEntity = new FeedbackEntity();
		
		// When
		feedbackServiceMapper.mapFeedbackToFeedbackEntity(feedback, feedbackEntity);
		
		// Then
		assertEquals(feedback.getComment(), feedbackEntity.getComment());
		assertEquals(feedback.getDatefeedback(), feedbackEntity.getDatefeedback());
		assertEquals(feedback.getIdUser(), feedbackEntity.getAppuser().getId());
		assertEquals(feedback.getIdTypeinfo(), feedbackEntity.getTypeinfo().getId());
		assertEquals(feedback.getIdPosition(), feedbackEntity.getPosition().getId());
	}

}