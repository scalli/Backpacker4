/*
 * Created on 28 okt 2015 ( Time 11:01:16 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.backpacker4.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.backpacker4.bean.Album;
import org.backpacker4.bean.jpa.AlbumEntity;
import java.util.Date;
import java.util.List;
import org.backpacker4.business.service.mapping.AlbumServiceMapper;
import org.backpacker4.persistence.services.jpa.AlbumPersistenceJPA;
import org.backpacker4.test.AlbumFactoryForTest;
import org.backpacker4.test.AlbumEntityFactoryForTest;
import org.backpacker4.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of AlbumService
 */
@RunWith(MockitoJUnitRunner.class)
public class AlbumServiceImplTest {

	@InjectMocks
	private AlbumServiceImpl albumService;
	@Mock
	private AlbumPersistenceJPA albumPersistenceJPA;
	@Mock
	private AlbumServiceMapper albumServiceMapper;
	
	private AlbumFactoryForTest albumFactoryForTest = new AlbumFactoryForTest();

	private AlbumEntityFactoryForTest albumEntityFactoryForTest = new AlbumEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		AlbumEntity albumEntity = albumPersistenceJPA.load(id);
		
		Album album = albumFactoryForTest.newAlbum();
		when(albumServiceMapper.mapAlbumEntityToAlbum(albumEntity)).thenReturn(album);

		// When
		Album albumFound = albumService.findById(id);

		// Then
		assertEquals(album.getId(),albumFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<AlbumEntity> albumEntitys = new ArrayList<AlbumEntity>();
		AlbumEntity albumEntity1 = albumEntityFactoryForTest.newAlbumEntity();
		albumEntitys.add(albumEntity1);
		AlbumEntity albumEntity2 = albumEntityFactoryForTest.newAlbumEntity();
		albumEntitys.add(albumEntity2);
		when(albumPersistenceJPA.loadAll()).thenReturn(albumEntitys);
		
		Album album1 = albumFactoryForTest.newAlbum();
		when(albumServiceMapper.mapAlbumEntityToAlbum(albumEntity1)).thenReturn(album1);
		Album album2 = albumFactoryForTest.newAlbum();
		when(albumServiceMapper.mapAlbumEntityToAlbum(albumEntity2)).thenReturn(album2);

		// When
		List<Album> albumsFounds = albumService.findAll();

		// Then
		assertTrue(album1 == albumsFounds.get(0));
		assertTrue(album2 == albumsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Album album = albumFactoryForTest.newAlbum();

		AlbumEntity albumEntity = albumEntityFactoryForTest.newAlbumEntity();
		when(albumPersistenceJPA.load(album.getId())).thenReturn(null);
		
		albumEntity = new AlbumEntity();
		albumServiceMapper.mapAlbumToAlbumEntity(album, albumEntity);
		AlbumEntity albumEntitySaved = albumPersistenceJPA.save(albumEntity);
		
		Album albumSaved = albumFactoryForTest.newAlbum();
		when(albumServiceMapper.mapAlbumEntityToAlbum(albumEntitySaved)).thenReturn(albumSaved);

		// When
		Album albumResult = albumService.create(album);

		// Then
		assertTrue(albumResult == albumSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Album album = albumFactoryForTest.newAlbum();

		AlbumEntity albumEntity = albumEntityFactoryForTest.newAlbumEntity();
		when(albumPersistenceJPA.load(album.getId())).thenReturn(albumEntity);

		// When
		Exception exception = null;
		try {
			albumService.create(album);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Album album = albumFactoryForTest.newAlbum();

		AlbumEntity albumEntity = albumEntityFactoryForTest.newAlbumEntity();
		when(albumPersistenceJPA.load(album.getId())).thenReturn(albumEntity);
		
		AlbumEntity albumEntitySaved = albumEntityFactoryForTest.newAlbumEntity();
		when(albumPersistenceJPA.save(albumEntity)).thenReturn(albumEntitySaved);
		
		Album albumSaved = albumFactoryForTest.newAlbum();
		when(albumServiceMapper.mapAlbumEntityToAlbum(albumEntitySaved)).thenReturn(albumSaved);

		// When
		Album albumResult = albumService.update(album);

		// Then
		verify(albumServiceMapper).mapAlbumToAlbumEntity(album, albumEntity);
		assertTrue(albumResult == albumSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		albumService.delete(id);

		// Then
		verify(albumPersistenceJPA).delete(id);
		
	}

}
