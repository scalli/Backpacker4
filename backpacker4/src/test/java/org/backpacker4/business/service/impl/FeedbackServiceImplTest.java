/*
 * Created on 28 okt 2015 ( Time 11:01:16 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.backpacker4.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.backpacker4.bean.Feedback;
import org.backpacker4.bean.jpa.FeedbackEntity;
import java.util.Date;
import java.util.List;
import org.backpacker4.business.service.mapping.FeedbackServiceMapper;
import org.backpacker4.persistence.services.jpa.FeedbackPersistenceJPA;
import org.backpacker4.test.FeedbackFactoryForTest;
import org.backpacker4.test.FeedbackEntityFactoryForTest;
import org.backpacker4.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of FeedbackService
 */
@RunWith(MockitoJUnitRunner.class)
public class FeedbackServiceImplTest {

	@InjectMocks
	private FeedbackServiceImpl feedbackService;
	@Mock
	private FeedbackPersistenceJPA feedbackPersistenceJPA;
	@Mock
	private FeedbackServiceMapper feedbackServiceMapper;
	
	private FeedbackFactoryForTest feedbackFactoryForTest = new FeedbackFactoryForTest();

	private FeedbackEntityFactoryForTest feedbackEntityFactoryForTest = new FeedbackEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		FeedbackEntity feedbackEntity = feedbackPersistenceJPA.load(id);
		
		Feedback feedback = feedbackFactoryForTest.newFeedback();
		when(feedbackServiceMapper.mapFeedbackEntityToFeedback(feedbackEntity)).thenReturn(feedback);

		// When
		Feedback feedbackFound = feedbackService.findById(id);

		// Then
		assertEquals(feedback.getId(),feedbackFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<FeedbackEntity> feedbackEntitys = new ArrayList<FeedbackEntity>();
		FeedbackEntity feedbackEntity1 = feedbackEntityFactoryForTest.newFeedbackEntity();
		feedbackEntitys.add(feedbackEntity1);
		FeedbackEntity feedbackEntity2 = feedbackEntityFactoryForTest.newFeedbackEntity();
		feedbackEntitys.add(feedbackEntity2);
		when(feedbackPersistenceJPA.loadAll()).thenReturn(feedbackEntitys);
		
		Feedback feedback1 = feedbackFactoryForTest.newFeedback();
		when(feedbackServiceMapper.mapFeedbackEntityToFeedback(feedbackEntity1)).thenReturn(feedback1);
		Feedback feedback2 = feedbackFactoryForTest.newFeedback();
		when(feedbackServiceMapper.mapFeedbackEntityToFeedback(feedbackEntity2)).thenReturn(feedback2);

		// When
		List<Feedback> feedbacksFounds = feedbackService.findAll();

		// Then
		assertTrue(feedback1 == feedbacksFounds.get(0));
		assertTrue(feedback2 == feedbacksFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Feedback feedback = feedbackFactoryForTest.newFeedback();

		FeedbackEntity feedbackEntity = feedbackEntityFactoryForTest.newFeedbackEntity();
		when(feedbackPersistenceJPA.load(feedback.getId())).thenReturn(null);
		
		feedbackEntity = new FeedbackEntity();
		feedbackServiceMapper.mapFeedbackToFeedbackEntity(feedback, feedbackEntity);
		FeedbackEntity feedbackEntitySaved = feedbackPersistenceJPA.save(feedbackEntity);
		
		Feedback feedbackSaved = feedbackFactoryForTest.newFeedback();
		when(feedbackServiceMapper.mapFeedbackEntityToFeedback(feedbackEntitySaved)).thenReturn(feedbackSaved);

		// When
		Feedback feedbackResult = feedbackService.create(feedback);

		// Then
		assertTrue(feedbackResult == feedbackSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Feedback feedback = feedbackFactoryForTest.newFeedback();

		FeedbackEntity feedbackEntity = feedbackEntityFactoryForTest.newFeedbackEntity();
		when(feedbackPersistenceJPA.load(feedback.getId())).thenReturn(feedbackEntity);

		// When
		Exception exception = null;
		try {
			feedbackService.create(feedback);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Feedback feedback = feedbackFactoryForTest.newFeedback();

		FeedbackEntity feedbackEntity = feedbackEntityFactoryForTest.newFeedbackEntity();
		when(feedbackPersistenceJPA.load(feedback.getId())).thenReturn(feedbackEntity);
		
		FeedbackEntity feedbackEntitySaved = feedbackEntityFactoryForTest.newFeedbackEntity();
		when(feedbackPersistenceJPA.save(feedbackEntity)).thenReturn(feedbackEntitySaved);
		
		Feedback feedbackSaved = feedbackFactoryForTest.newFeedback();
		when(feedbackServiceMapper.mapFeedbackEntityToFeedback(feedbackEntitySaved)).thenReturn(feedbackSaved);

		// When
		Feedback feedbackResult = feedbackService.update(feedback);

		// Then
		verify(feedbackServiceMapper).mapFeedbackToFeedbackEntity(feedback, feedbackEntity);
		assertTrue(feedbackResult == feedbackSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		feedbackService.delete(id);

		// Then
		verify(feedbackPersistenceJPA).delete(id);
		
	}

}
