/*
 * Created on 28 okt 2015 ( Time 11:01:16 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.backpacker4.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.backpacker4.bean.Appuser;
import org.backpacker4.bean.jpa.AppuserEntity;
import java.util.List;
import org.backpacker4.business.service.mapping.AppuserServiceMapper;
import org.backpacker4.persistence.services.jpa.AppuserPersistenceJPA;
import org.backpacker4.test.AppuserFactoryForTest;
import org.backpacker4.test.AppuserEntityFactoryForTest;
import org.backpacker4.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of AppuserService
 */
@RunWith(MockitoJUnitRunner.class)
public class AppuserServiceImplTest {

	@InjectMocks
	private AppuserServiceImpl appuserService;
	@Mock
	private AppuserPersistenceJPA appuserPersistenceJPA;
	@Mock
	private AppuserServiceMapper appuserServiceMapper;
	
	private AppuserFactoryForTest appuserFactoryForTest = new AppuserFactoryForTest();

	private AppuserEntityFactoryForTest appuserEntityFactoryForTest = new AppuserEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		AppuserEntity appuserEntity = appuserPersistenceJPA.load(id);
		
		Appuser appuser = appuserFactoryForTest.newAppuser();
		when(appuserServiceMapper.mapAppuserEntityToAppuser(appuserEntity)).thenReturn(appuser);

		// When
		Appuser appuserFound = appuserService.findById(id);

		// Then
		assertEquals(appuser.getId(),appuserFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<AppuserEntity> appuserEntitys = new ArrayList<AppuserEntity>();
		AppuserEntity appuserEntity1 = appuserEntityFactoryForTest.newAppuserEntity();
		appuserEntitys.add(appuserEntity1);
		AppuserEntity appuserEntity2 = appuserEntityFactoryForTest.newAppuserEntity();
		appuserEntitys.add(appuserEntity2);
		when(appuserPersistenceJPA.loadAll()).thenReturn(appuserEntitys);
		
		Appuser appuser1 = appuserFactoryForTest.newAppuser();
		when(appuserServiceMapper.mapAppuserEntityToAppuser(appuserEntity1)).thenReturn(appuser1);
		Appuser appuser2 = appuserFactoryForTest.newAppuser();
		when(appuserServiceMapper.mapAppuserEntityToAppuser(appuserEntity2)).thenReturn(appuser2);

		// When
		List<Appuser> appusersFounds = appuserService.findAll();

		// Then
		assertTrue(appuser1 == appusersFounds.get(0));
		assertTrue(appuser2 == appusersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Appuser appuser = appuserFactoryForTest.newAppuser();

		AppuserEntity appuserEntity = appuserEntityFactoryForTest.newAppuserEntity();
		when(appuserPersistenceJPA.load(appuser.getId())).thenReturn(null);
		
		appuserEntity = new AppuserEntity();
		appuserServiceMapper.mapAppuserToAppuserEntity(appuser, appuserEntity);
		AppuserEntity appuserEntitySaved = appuserPersistenceJPA.save(appuserEntity);
		
		Appuser appuserSaved = appuserFactoryForTest.newAppuser();
		when(appuserServiceMapper.mapAppuserEntityToAppuser(appuserEntitySaved)).thenReturn(appuserSaved);

		// When
		Appuser appuserResult = appuserService.create(appuser);

		// Then
		assertTrue(appuserResult == appuserSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Appuser appuser = appuserFactoryForTest.newAppuser();

		AppuserEntity appuserEntity = appuserEntityFactoryForTest.newAppuserEntity();
		when(appuserPersistenceJPA.load(appuser.getId())).thenReturn(appuserEntity);

		// When
		Exception exception = null;
		try {
			appuserService.create(appuser);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Appuser appuser = appuserFactoryForTest.newAppuser();

		AppuserEntity appuserEntity = appuserEntityFactoryForTest.newAppuserEntity();
		when(appuserPersistenceJPA.load(appuser.getId())).thenReturn(appuserEntity);
		
		AppuserEntity appuserEntitySaved = appuserEntityFactoryForTest.newAppuserEntity();
		when(appuserPersistenceJPA.save(appuserEntity)).thenReturn(appuserEntitySaved);
		
		Appuser appuserSaved = appuserFactoryForTest.newAppuser();
		when(appuserServiceMapper.mapAppuserEntityToAppuser(appuserEntitySaved)).thenReturn(appuserSaved);

		// When
		Appuser appuserResult = appuserService.update(appuser);

		// Then
		verify(appuserServiceMapper).mapAppuserToAppuserEntity(appuser, appuserEntity);
		assertTrue(appuserResult == appuserSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		appuserService.delete(id);

		// Then
		verify(appuserPersistenceJPA).delete(id);
		
	}

}
