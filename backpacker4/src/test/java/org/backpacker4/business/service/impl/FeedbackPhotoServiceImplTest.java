/*
 * Created on 28 okt 2015 ( Time 11:01:17 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.backpacker4.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.backpacker4.bean.FeedbackPhoto;
import org.backpacker4.bean.jpa.FeedbackPhotoEntity;
import org.backpacker4.bean.jpa.FeedbackPhotoEntityKey;
import org.backpacker4.business.service.mapping.FeedbackPhotoServiceMapper;
import org.backpacker4.persistence.services.jpa.FeedbackPhotoPersistenceJPA;
import org.backpacker4.test.FeedbackPhotoFactoryForTest;
import org.backpacker4.test.FeedbackPhotoEntityFactoryForTest;
import org.backpacker4.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of FeedbackPhotoService
 */
@RunWith(MockitoJUnitRunner.class)
public class FeedbackPhotoServiceImplTest {

	@InjectMocks
	private FeedbackPhotoServiceImpl feedbackPhotoService;
	@Mock
	private FeedbackPhotoPersistenceJPA feedbackPhotoPersistenceJPA;
	@Mock
	private FeedbackPhotoServiceMapper feedbackPhotoServiceMapper;
	
	private FeedbackPhotoFactoryForTest feedbackPhotoFactoryForTest = new FeedbackPhotoFactoryForTest();

	private FeedbackPhotoEntityFactoryForTest feedbackPhotoEntityFactoryForTest = new FeedbackPhotoEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long idFeedback = mockValues.nextLong();
		Long idPhoto = mockValues.nextLong();
		
		FeedbackPhotoEntityKey feedbackPhotoEntityKey = new FeedbackPhotoEntityKey(idFeedback, idPhoto);
		feedbackPhotoEntityKey.setIdFeedback(idFeedback);
		feedbackPhotoEntityKey.setIdPhoto(idPhoto);
		
		FeedbackPhotoEntity feedbackPhotoEntity = feedbackPhotoPersistenceJPA.load(feedbackPhotoEntityKey);
		
		FeedbackPhoto feedbackPhoto = feedbackPhotoFactoryForTest.newFeedbackPhoto();
		when(feedbackPhotoServiceMapper.mapFeedbackPhotoEntityToFeedbackPhoto(feedbackPhotoEntity)).thenReturn(feedbackPhoto);

		// When
		FeedbackPhoto feedbackPhotoFound = feedbackPhotoService.findById(idFeedback, idPhoto);

		// Then
		assertEquals(feedbackPhoto.getIdFeedback(),feedbackPhotoFound.getIdFeedback());
		assertEquals(feedbackPhoto.getIdPhoto(),feedbackPhotoFound.getIdPhoto());
	}

	@Test
	public void findAll() {
		// Given
		List<FeedbackPhotoEntity> feedbackPhotoEntitys = new ArrayList<FeedbackPhotoEntity>();
		FeedbackPhotoEntity feedbackPhotoEntity1 = feedbackPhotoEntityFactoryForTest.newFeedbackPhotoEntity();
		feedbackPhotoEntitys.add(feedbackPhotoEntity1);
		FeedbackPhotoEntity feedbackPhotoEntity2 = feedbackPhotoEntityFactoryForTest.newFeedbackPhotoEntity();
		feedbackPhotoEntitys.add(feedbackPhotoEntity2);
		when(feedbackPhotoPersistenceJPA.loadAll()).thenReturn(feedbackPhotoEntitys);
		
		FeedbackPhoto feedbackPhoto1 = feedbackPhotoFactoryForTest.newFeedbackPhoto();
		when(feedbackPhotoServiceMapper.mapFeedbackPhotoEntityToFeedbackPhoto(feedbackPhotoEntity1)).thenReturn(feedbackPhoto1);
		FeedbackPhoto feedbackPhoto2 = feedbackPhotoFactoryForTest.newFeedbackPhoto();
		when(feedbackPhotoServiceMapper.mapFeedbackPhotoEntityToFeedbackPhoto(feedbackPhotoEntity2)).thenReturn(feedbackPhoto2);

		// When
		List<FeedbackPhoto> feedbackPhotosFounds = feedbackPhotoService.findAll();

		// Then
		assertTrue(feedbackPhoto1 == feedbackPhotosFounds.get(0));
		assertTrue(feedbackPhoto2 == feedbackPhotosFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		FeedbackPhoto feedbackPhoto = feedbackPhotoFactoryForTest.newFeedbackPhoto();

		FeedbackPhotoEntity feedbackPhotoEntity = feedbackPhotoEntityFactoryForTest.newFeedbackPhotoEntity();
		when(feedbackPhotoPersistenceJPA.load(feedbackPhoto.getIdFeedback(), feedbackPhoto.getIdPhoto())).thenReturn(null);
		
		feedbackPhotoEntity = new FeedbackPhotoEntity();
		feedbackPhotoServiceMapper.mapFeedbackPhotoToFeedbackPhotoEntity(feedbackPhoto, feedbackPhotoEntity);
		FeedbackPhotoEntity feedbackPhotoEntitySaved = feedbackPhotoPersistenceJPA.save(feedbackPhotoEntity);
		
		FeedbackPhoto feedbackPhotoSaved = feedbackPhotoFactoryForTest.newFeedbackPhoto();
		when(feedbackPhotoServiceMapper.mapFeedbackPhotoEntityToFeedbackPhoto(feedbackPhotoEntitySaved)).thenReturn(feedbackPhotoSaved);

		// When
		FeedbackPhoto feedbackPhotoResult = feedbackPhotoService.create(feedbackPhoto);

		// Then
		assertTrue(feedbackPhotoResult == feedbackPhotoSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		FeedbackPhoto feedbackPhoto = feedbackPhotoFactoryForTest.newFeedbackPhoto();

		FeedbackPhotoEntity feedbackPhotoEntity = feedbackPhotoEntityFactoryForTest.newFeedbackPhotoEntity();
		when(feedbackPhotoPersistenceJPA.load(feedbackPhoto.getIdFeedback(), feedbackPhoto.getIdPhoto())).thenReturn(feedbackPhotoEntity);

		// When
		Exception exception = null;
		try {
			feedbackPhotoService.create(feedbackPhoto);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		FeedbackPhoto feedbackPhoto = feedbackPhotoFactoryForTest.newFeedbackPhoto();

		FeedbackPhotoEntity feedbackPhotoEntity = feedbackPhotoEntityFactoryForTest.newFeedbackPhotoEntity();
		when(feedbackPhotoPersistenceJPA.load(feedbackPhoto.getIdFeedback(), feedbackPhoto.getIdPhoto())).thenReturn(feedbackPhotoEntity);
		
		FeedbackPhotoEntity feedbackPhotoEntitySaved = feedbackPhotoEntityFactoryForTest.newFeedbackPhotoEntity();
		when(feedbackPhotoPersistenceJPA.save(feedbackPhotoEntity)).thenReturn(feedbackPhotoEntitySaved);
		
		FeedbackPhoto feedbackPhotoSaved = feedbackPhotoFactoryForTest.newFeedbackPhoto();
		when(feedbackPhotoServiceMapper.mapFeedbackPhotoEntityToFeedbackPhoto(feedbackPhotoEntitySaved)).thenReturn(feedbackPhotoSaved);

		// When
		FeedbackPhoto feedbackPhotoResult = feedbackPhotoService.update(feedbackPhoto);

		// Then
		verify(feedbackPhotoServiceMapper).mapFeedbackPhotoToFeedbackPhotoEntity(feedbackPhoto, feedbackPhotoEntity);
		assertTrue(feedbackPhotoResult == feedbackPhotoSaved);
	}

	@Test
	public void delete() {
		// Given
		Long idFeedback = mockValues.nextLong();
		Long idPhoto = mockValues.nextLong();

		// When
		feedbackPhotoService.delete(idFeedback, idPhoto);

		// Then
		verify(feedbackPhotoPersistenceJPA).delete(idFeedback, idPhoto);
		
	}

}
