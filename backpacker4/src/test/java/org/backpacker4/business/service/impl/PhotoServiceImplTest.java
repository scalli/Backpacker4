/*
 * Created on 28 okt 2015 ( Time 11:01:17 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.backpacker4.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.backpacker4.bean.Photo;
import org.backpacker4.bean.jpa.PhotoEntity;
import java.util.Date;
import java.util.List;
import org.backpacker4.business.service.mapping.PhotoServiceMapper;
import org.backpacker4.persistence.services.jpa.PhotoPersistenceJPA;
import org.backpacker4.test.PhotoFactoryForTest;
import org.backpacker4.test.PhotoEntityFactoryForTest;
import org.backpacker4.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of PhotoService
 */
@RunWith(MockitoJUnitRunner.class)
public class PhotoServiceImplTest {

	@InjectMocks
	private PhotoServiceImpl photoService;
	@Mock
	private PhotoPersistenceJPA photoPersistenceJPA;
	@Mock
	private PhotoServiceMapper photoServiceMapper;
	
	private PhotoFactoryForTest photoFactoryForTest = new PhotoFactoryForTest();

	private PhotoEntityFactoryForTest photoEntityFactoryForTest = new PhotoEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		PhotoEntity photoEntity = photoPersistenceJPA.load(id);
		
		Photo photo = photoFactoryForTest.newPhoto();
		when(photoServiceMapper.mapPhotoEntityToPhoto(photoEntity)).thenReturn(photo);

		// When
		Photo photoFound = photoService.findById(id);

		// Then
		assertEquals(photo.getId(),photoFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<PhotoEntity> photoEntitys = new ArrayList<PhotoEntity>();
		PhotoEntity photoEntity1 = photoEntityFactoryForTest.newPhotoEntity();
		photoEntitys.add(photoEntity1);
		PhotoEntity photoEntity2 = photoEntityFactoryForTest.newPhotoEntity();
		photoEntitys.add(photoEntity2);
		when(photoPersistenceJPA.loadAll()).thenReturn(photoEntitys);
		
		Photo photo1 = photoFactoryForTest.newPhoto();
		when(photoServiceMapper.mapPhotoEntityToPhoto(photoEntity1)).thenReturn(photo1);
		Photo photo2 = photoFactoryForTest.newPhoto();
		when(photoServiceMapper.mapPhotoEntityToPhoto(photoEntity2)).thenReturn(photo2);

		// When
		List<Photo> photosFounds = photoService.findAll();

		// Then
		assertTrue(photo1 == photosFounds.get(0));
		assertTrue(photo2 == photosFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Photo photo = photoFactoryForTest.newPhoto();

		PhotoEntity photoEntity = photoEntityFactoryForTest.newPhotoEntity();
		when(photoPersistenceJPA.load(photo.getId())).thenReturn(null);
		
		photoEntity = new PhotoEntity();
		photoServiceMapper.mapPhotoToPhotoEntity(photo, photoEntity);
		PhotoEntity photoEntitySaved = photoPersistenceJPA.save(photoEntity);
		
		Photo photoSaved = photoFactoryForTest.newPhoto();
		when(photoServiceMapper.mapPhotoEntityToPhoto(photoEntitySaved)).thenReturn(photoSaved);

		// When
		Photo photoResult = photoService.create(photo);

		// Then
		assertTrue(photoResult == photoSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Photo photo = photoFactoryForTest.newPhoto();

		PhotoEntity photoEntity = photoEntityFactoryForTest.newPhotoEntity();
		when(photoPersistenceJPA.load(photo.getId())).thenReturn(photoEntity);

		// When
		Exception exception = null;
		try {
			photoService.create(photo);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Photo photo = photoFactoryForTest.newPhoto();

		PhotoEntity photoEntity = photoEntityFactoryForTest.newPhotoEntity();
		when(photoPersistenceJPA.load(photo.getId())).thenReturn(photoEntity);
		
		PhotoEntity photoEntitySaved = photoEntityFactoryForTest.newPhotoEntity();
		when(photoPersistenceJPA.save(photoEntity)).thenReturn(photoEntitySaved);
		
		Photo photoSaved = photoFactoryForTest.newPhoto();
		when(photoServiceMapper.mapPhotoEntityToPhoto(photoEntitySaved)).thenReturn(photoSaved);

		// When
		Photo photoResult = photoService.update(photo);

		// Then
		verify(photoServiceMapper).mapPhotoToPhotoEntity(photo, photoEntity);
		assertTrue(photoResult == photoSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		photoService.delete(id);

		// Then
		verify(photoPersistenceJPA).delete(id);
		
	}

}
