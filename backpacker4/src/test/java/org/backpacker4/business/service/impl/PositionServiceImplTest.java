/*
 * Created on 28 okt 2015 ( Time 11:01:17 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.backpacker4.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.backpacker4.bean.Position;
import org.backpacker4.bean.jpa.PositionEntity;
import java.math.BigDecimal;
import java.util.List;
import org.backpacker4.business.service.mapping.PositionServiceMapper;
import org.backpacker4.persistence.services.jpa.PositionPersistenceJPA;
import org.backpacker4.test.PositionFactoryForTest;
import org.backpacker4.test.PositionEntityFactoryForTest;
import org.backpacker4.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of PositionService
 */
@RunWith(MockitoJUnitRunner.class)
public class PositionServiceImplTest {

	@InjectMocks
	private PositionServiceImpl positionService;
	@Mock
	private PositionPersistenceJPA positionPersistenceJPA;
	@Mock
	private PositionServiceMapper positionServiceMapper;
	
	private PositionFactoryForTest positionFactoryForTest = new PositionFactoryForTest();

	private PositionEntityFactoryForTest positionEntityFactoryForTest = new PositionEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		PositionEntity positionEntity = positionPersistenceJPA.load(id);
		
		Position position = positionFactoryForTest.newPosition();
		when(positionServiceMapper.mapPositionEntityToPosition(positionEntity)).thenReturn(position);

		// When
		Position positionFound = positionService.findById(id);

		// Then
		assertEquals(position.getId(),positionFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<PositionEntity> positionEntitys = new ArrayList<PositionEntity>();
		PositionEntity positionEntity1 = positionEntityFactoryForTest.newPositionEntity();
		positionEntitys.add(positionEntity1);
		PositionEntity positionEntity2 = positionEntityFactoryForTest.newPositionEntity();
		positionEntitys.add(positionEntity2);
		when(positionPersistenceJPA.loadAll()).thenReturn(positionEntitys);
		
		Position position1 = positionFactoryForTest.newPosition();
		when(positionServiceMapper.mapPositionEntityToPosition(positionEntity1)).thenReturn(position1);
		Position position2 = positionFactoryForTest.newPosition();
		when(positionServiceMapper.mapPositionEntityToPosition(positionEntity2)).thenReturn(position2);

		// When
		List<Position> positionsFounds = positionService.findAll();

		// Then
		assertTrue(position1 == positionsFounds.get(0));
		assertTrue(position2 == positionsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Position position = positionFactoryForTest.newPosition();

		PositionEntity positionEntity = positionEntityFactoryForTest.newPositionEntity();
		when(positionPersistenceJPA.load(position.getId())).thenReturn(null);
		
		positionEntity = new PositionEntity();
		positionServiceMapper.mapPositionToPositionEntity(position, positionEntity);
		PositionEntity positionEntitySaved = positionPersistenceJPA.save(positionEntity);
		
		Position positionSaved = positionFactoryForTest.newPosition();
		when(positionServiceMapper.mapPositionEntityToPosition(positionEntitySaved)).thenReturn(positionSaved);

		// When
		Position positionResult = positionService.create(position);

		// Then
		assertTrue(positionResult == positionSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Position position = positionFactoryForTest.newPosition();

		PositionEntity positionEntity = positionEntityFactoryForTest.newPositionEntity();
		when(positionPersistenceJPA.load(position.getId())).thenReturn(positionEntity);

		// When
		Exception exception = null;
		try {
			positionService.create(position);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Position position = positionFactoryForTest.newPosition();

		PositionEntity positionEntity = positionEntityFactoryForTest.newPositionEntity();
		when(positionPersistenceJPA.load(position.getId())).thenReturn(positionEntity);
		
		PositionEntity positionEntitySaved = positionEntityFactoryForTest.newPositionEntity();
		when(positionPersistenceJPA.save(positionEntity)).thenReturn(positionEntitySaved);
		
		Position positionSaved = positionFactoryForTest.newPosition();
		when(positionServiceMapper.mapPositionEntityToPosition(positionEntitySaved)).thenReturn(positionSaved);

		// When
		Position positionResult = positionService.update(position);

		// Then
		verify(positionServiceMapper).mapPositionToPositionEntity(position, positionEntity);
		assertTrue(positionResult == positionSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		positionService.delete(id);

		// Then
		verify(positionPersistenceJPA).delete(id);
		
	}

}
